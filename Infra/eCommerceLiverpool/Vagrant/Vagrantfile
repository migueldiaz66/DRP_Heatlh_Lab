# Copyright 2018 Miguel Jesús Díaz Macedo & 12Factor MX 
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this 
# software and associated documentation files (the "Software"), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, 
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies 
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
# DEALINGS IN THE SOFTWARE.

# puts ""
# puts "---------------------------------------------------"
# puts "--- Vagrant provisoner generated by Miguel Díaz ---"
# puts "--- All rigths reserved 2108 \u00A9 12factor.mx ---"
# puts "---------------------------------------------------"
# puts "---    Vist us at https://www.12factor.mx       ---"
# puts "---------------------------------------------------"
# puts ""


# Capture Vagrant command startup
startTime = Time.new

# Requiered for nice printout to console (pretty print)
require 'pp'

# Some marketing printouts
puts ""
puts "---------------------------------------------------"
puts "--- Vagrant provisoner generated by Miguel Díaz ---"
puts "--- All rigths reserved 2108 \u00A9 12factor.mx ---"
puts "---------------------------------------------------"
puts "---    Vist us at https://www.12factor.mx       ---"
puts "---------------------------------------------------"
puts ""
puts "Starting Vagrant at: " + startTime.inspect                
puts ""
puts "---------------------------------------------------"


# "Global variables"  initialization block
i = 1
ansibleGroupsHash = Hash.new {|h,k| h[k]=[]}
ansibleGroupsHash1 = Hash.new {|h,k| h[k]=[]}
ansibleGroupsHash3 = Hash.new {|h,k| h[k]=[]}

# Read configuration file and pull the hosts and goups items 
# into individual hashes
configData = YAML.load_file('../conf/config.yml')
hosts = configData['inventory']['machines']
groups = configData['inventory']['groups']

# Describes itself
puts ""
puts "--- Generating the Ansible inventory groups ---"
puts ""

groups.each do |group|
 len = group["elements"].length
  for r in 0..len-1
    ansibleGroupsHash[group["name"]] << group["elements"][r]
  end  
end

# Pretty print the resting hash
puts '----------------------------------------'
puts '-- Group Hash for the Vagrant-Ansible --'
puts '-- provisioner                        --'
puts '----------------------------------------'
pp ansibleGroupsHash
puts '----------------------------------------'

# work arroud to overcome a posible bug in provisioner
ansibleGroupsHash3 = ansibleGroupsHash1.merge(ansibleGroupsHash)

# Starts the vagrant machines configuration loop
Vagrant.configure(2) do |config|
  
  # get the base box
  config.vm.box = "ol68" #wls_admin_server_name
  config.vm.box_url = "https://yum.oracle.com/boxes/oraclelinux/ol68/ol68.box"

  # Loop over our hosts list (hash) and set 
  # the virtualmachine and virtualbox settings.
  #
  # All attibutes are set from the config file.
  #
  # You can extend the configuration file and
  # this loop in order to suit your need for 
  # the virtual machine in turn. 
  #
  # Some parameters here are hard coded but can
  # be easily transported to the configuration file
  # by creating new lists and hashes on the configuration 
  # file and pulled here.
  hosts.each do |host|
    config.vm.define host["name"] do |machine|
      machine.vm.network "private_network", ip: host["ip"]
      machine.vm.provider "virtualbox" do |virtualbox|
        virtualbox.name = host["name"] 
        virtualbox.memory = 512
        if host.has_key?('synced_folders')
          folders = host['synced_folders']
          folders.each do |folder|
            machine.vm.synced_folder folder['src'], folder['dest'], folder['options']
          end
        end
      end

      # When all virtual machine's configuration has
      # been proceced then proceed to delegate the 
      # provison to Ansible.
      #
      # Some parameters here are hard coded but can
      # be easily transported to the configuration file
      # by creating new lists and hashes on the configuration 
      # file and then pulled here.
      if i == hosts.count
        config.vm.provision :ansible do |ansible|    
          ansible.limit = "all"
          ansible.playbook = "../Ansible/main.1.yml"
          ansible.sudo = true
          ansible.groups = ansibleGroupsHash
        end
      end
      i = i + 1
    end
  end
end



       



