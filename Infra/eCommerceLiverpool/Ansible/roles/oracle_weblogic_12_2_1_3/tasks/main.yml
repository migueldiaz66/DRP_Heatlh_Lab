---

#- name: Add the group "oracle" 
#  group:
#    name: oracle
#    state: present
#    gid: 1040

#- name: Generate password for new user
#  shell: openssl rand -base64 5
#  register: user_password

#- name: Generate encrypted password
#  shell: 'openssl passwd -1 -salt 12factor {{ user_password.stdout }}'
#  register: encrypted_user_password

#- name: Add the user "oracle"
#  user:
#    name: oracle
#    password: '{{ encrypted_user_password.stdout }}'
#    comment: "User added by ansible on {{ ansible_date_time.date }} using www.12factor.mx oracle_weblogic_12_2_1_3.yml role"
#    uid: 1040
#    group: oracle
#    shell: /bin/bash
#    expires: -1
#    create_home: true
#    home: /home/Middleware
#    update_password: on_create
#    append: yes
#  register: user_created
    
#- name: Force user to never expire
#  shell: chage -m 0 -M 99999 -I -1 -E -1 oracle
#  when: user_created.changed

#- name: User created
#  debug: msg="Password for oracle is {{ user_password.stdout }}"
#  when: user_created.changed

#- name: Validate if domain already exits
#  stat:
#    path: /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/logs/AdminServer.log
#  register: domain_exists
 # when: inventory_hostname == 'AdminServer-eCommerce-liverpool-Prd' or  inventory_hostname == 'AdminServer-eCommerce-liverpool-Drp'

#- name:  Already exists Domain?
#  debug: msg='{{ domain_exists }}'
#  when: inventory_hostname == 'AdminServer-eCommerce-liverpool-Prd' or  inventory_hostname == 'AdminServer-eCommerce-liverpool-Drp'
  

#- block: 
      
 # - name: clean previous domian configuration if necesary
 #   file:
 #     state: absent
 #     path: "/u01/oracle"
    #when: (inventory_hostname == 'AdminServer-eCommerce-liverpool-Prd' or  inventory_hostname == 'AdminServer-eCommerce-liverpool-Drp')
    #ignore_errors: yes  
 
  - name: clean previous domian configuration if necesary
    shell: 'rm -rf /u01/oracle/'
   
  - name: Create oracle folder
    shell: 'mkdir -p /u01/oracle/'

      
 # - name: Change /u01/oracle owner to oracle user
 #   file:
 #     path: /u01/oracle
 #     state: directory
 #     mode: 0777
 #     owner: oracle
 #     group: oracle  
 #   when: (inventory_hostname == 'AdminServer-eCommerce-liverpool-Prd' or  inventory_hostname == 'AdminServer-eCommerce-liverpool-Drp')
      
#  - name: Copy srcipts for Oracle WebLogic installation and WebLogic Domain creation
#    copy: 
#      src={{ item.0 }} 
#      dest={{ item.1 }}
#      mode={{ item.2 }}
#    with_together:
#      - [ 'createAndStartEmptyDomain.sh',
#          'create-wls-domain1.py',  
#          'install.file', 
#          'oraInst.loc', 
#          'fmw_12.2.1.3.0_wls_Disk1_1of1.zip',
#          'domain.properties']
#      - [ '/u01/oracle/', 
#          '/u01/oracle/', 
#          '/u01/', 
#          '/u01/', 
#          '/u01/',
#          '/u01/oracle/properties']
#      - [ 'u+rwx,g+rwx,o+rwx', 
#          'u+rwx,g+rwx,o+rwx', 
#          'u+rw,g+rw,o+rw', 
#          'u+rw,g+rw,o+rw', 
#          'u+rw,g+rw,o+rw',
#          'u+rw,g+rw,o+rw']

 # - name: Extracting Oracle WebLogic zip into /u01
 #   unarchive:
 #     src: fmw_12.2.1.3.0_wls_Disk1_1of1.zip
 #     dest: /u01

 # - name: Changing /var/tmp permisions to 0777
 #   file:
 #     path: /var/tmp
 #     mode: 0777 


## reempalzar por un tar

##  - name: Oracle WebLogic Server instalation for AdminServer
##    shell: java -jar /u01/files/fmw_12.2.1.3.0_wls.jar -silent -responseFile /u01/files/install.file -invPtrLoc /u01/files/oraInst.loc -jreLoc /usr/java -ignoreSysPrereqs -force -novalidation ORACLE_HOME=/u01/oracle INSTALL_TYPE="WebLogic Server"
#    args:
#      chdir: /u01
##    become: true
##    become_user: vagrant

  - name: Oracle WebLogic Server instalation for AdminServer
    unarchive:
      src: /u01/files/wls.tar.gz
      dest: /u01
      remote_src: yes

    

 # - name: Oracle WebLogic Domain setup
 #   shell: wlst.sh -skipWLSModuleScanning -loadProperties /u01/oracle/properties/domain.properties /u01/oracle/create-wls-domain1.py
 #   args:
 #     chdir: /u01
 #   environment:
 #     USER_MEM_ARGS: "-Djava.security.egd=file:/dev/./urandom"
 #     PATH: "{{ ansible_env.PATH }}:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin"
 #   become: true
 #   become_user: vagrant
 #   register: eco

 # - name: path
 #   debug: msg=" {{ eco }}"

 # - name: Add user and password to boot.properties
 #   shell: 'mkdir -p /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/security/ && \ 
 #           echo "username=weblogic" >> /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/security/boot.properties && \
 #           echo "password=Password@1" >> /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/security/boot.properties &&  \
 #           /u01/oracle/user_projects/domains/base_domain/bin/setDomainEnv.sh'
 #   register: boot_proprties_res

  #- name:  Boot_properties result
  #  debug: msg='{{ boot_proprties_res }}'

  #- name: Cleaning all temporaly created files
  #  file: 
  #    path: '{{ item }}'
  #    state: absent
  #  with_items:
  #    - '/u01/{{FMW_JAR}}'
  #    - '/u01/fmw_12.2.1.3.0_wls_Disk1_1of1.zip' 
  #    - /u01/oraInst.loc 
  #    - /u01/install.file

#  when: #(inventory_hostname == "AdminServer-eCommerce-liverpool-Prd" or  inventory_hostname == "AdminServer-eCommerce-liverpool-Drp") and  
#    domain_exists.stat.exists == false
  #ignore_errors: yes

#- name: start the AdminServer
#  shell: /u01/oracle/user_projects/domains/base_domain/startWebLogic.sh &
#  register: start_admin_res
#  async: 1000
#  poll: 0
#  when: (inventory_hostname == "AdminServer-eCommerce-liverpool-Prd" or  inventory_hostname == "AdminServer-eCommerce-liverpool-Drp") and  domain_exists.stat.exists == false


#- name: 'start the AdminServer - check on async task {{ start_admin_res.ansible_job_id }}'
#  async_status:
#    jid: "{{ start_admin_res.ansible_job_id }}"
#  register: start_admin_res
#  until: start_admin_res.finished
#  retries: 30
#  when: (inventory_hostname == "AdminServer-eCommerce-liverpool-Prd" or  inventory_hostname == "AdminServer-eCommerce-liverpool-Drp") and  domain_exists.stat.exists == false

#- name:  start_admin result
#  debug: msg='{{ start_admin_res }}'
     
#- name: Print the final ENV
#  shell: 'env'
#  register: env

#- name:  env result
#  debug: msg='{{ env.stdout_lines }}' 